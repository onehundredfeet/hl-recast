//--------------------------------------------------------------------------------------------
// DetourStatus.h
//--------------------------------------------------------------------------------------------

typedef StatusCode uint;

//--------------------------------------------------------------------------------------------
// Recast.h
//--------------------------------------------------------------------------------------------

enum rcLogCategory
{
	"RC_LOG_PROGRESS",
	"RC_LOG_WARNING",
	"RC_LOG_ERROR"
};

enum rcTimerLabel
{
	/// The user defined total time of the build.
	"RC_TIMER_TOTAL",
	/// A user defined build time.
	"RC_TIMER_TEMP",
	/// The time to rasterize the triangles. (See: #rcRasterizeTriangle)
	"RC_TIMER_RASTERIZE_TRIANGLES",
	/// The time to build the compact heightfield. (See: #rcBuildCompactHeightfield)
	"RC_TIMER_BUILD_COMPACTHEIGHTFIELD",
	/// The total time to build the contours. (See: #rcBuildContours)
	"RC_TIMER_BUILD_CONTOURS",
	/// The time to trace the boundaries of the contours. (See: #rcBuildContours)
	"RC_TIMER_BUILD_CONTOURS_TRACE",
	/// The time to simplify the contours. (See: #rcBuildContours)
	"RC_TIMER_BUILD_CONTOURS_SIMPLIFY",
	/// The time to filter ledge spans. (See: #rcFilterLedgeSpans)
	"RC_TIMER_FILTER_BORDER",
	/// The time to filter low height spans. (See: #rcFilterWalkableLowHeightSpans)
	"RC_TIMER_FILTER_WALKABLE",
	/// The time to apply the median filter. (See: #rcMedianFilterWalkableArea)
	"RC_TIMER_MEDIAN_AREA",
	/// The time to filter low obstacles. (See: #rcFilterLowHangingWalkableObstacles)
	"RC_TIMER_FILTER_LOW_OBSTACLES",
	/// The time to build the polygon mesh. (See: #rcBuildPolyMesh)
	"RC_TIMER_BUILD_POLYMESH",
	/// The time to merge polygon meshes. (See: #rcMergePolyMeshes)
	"RC_TIMER_MERGE_POLYMESH",
	/// The time to erode the walkable area. (See: #rcErodeWalkableArea)
	"RC_TIMER_ERODE_AREA",
	/// The time to mark a box area. (See: #rcMarkBoxArea)
	"RC_TIMER_MARK_BOX_AREA",
	/// The time to mark a cylinder area. (See: #rcMarkCylinderArea)
	"RC_TIMER_MARK_CYLINDER_AREA",
	/// The time to mark a convex polygon area. (See: #rcMarkConvexPolyArea)
	"RC_TIMER_MARK_CONVEXPOLY_AREA",
	/// The total time to build the distance field. (See: #rcBuildDistanceField)
	"RC_TIMER_BUILD_DISTANCEFIELD",
	/// The time to build the distances of the distance field. (See: #rcBuildDistanceField)
	"RC_TIMER_BUILD_DISTANCEFIELD_DIST",
	/// The time to blur the distance field. (See: #rcBuildDistanceField)
	"RC_TIMER_BUILD_DISTANCEFIELD_BLUR",
	/// The total time to build the regions. (See: #rcBuildRegions, #rcBuildRegionsMonotone)
	"RC_TIMER_BUILD_REGIONS",
	/// The total time to apply the watershed algorithm. (See: #rcBuildRegions)
	"RC_TIMER_BUILD_REGIONS_WATERSHED",
	/// The time to expand regions while applying the watershed algorithm. (See: #rcBuildRegions)
	"RC_TIMER_BUILD_REGIONS_EXPAND",
	/// The time to flood regions while applying the watershed algorithm. (See: #rcBuildRegions)
	"RC_TIMER_BUILD_REGIONS_FLOOD",
	/// The time to filter out small regions. (See: #rcBuildRegions, #rcBuildRegionsMonotone)
	"RC_TIMER_BUILD_REGIONS_FILTER",
	/// The time to build heightfield layers. (See: #rcBuildHeightfieldLayers)
	"RC_TIMER_BUILD_LAYERS", 
	/// The time to build the polygon mesh detail. (See: #rcBuildPolyMeshDetail)
	"RC_TIMER_BUILD_POLYMESHDETAIL",
	/// The time to merge polygon mesh details. (See: #rcMergePolyMeshDetails)
	"RC_TIMER_MERGE_POLYMESHDETAIL",
	/// The maximum number of timers.  (Used for iterating timers.)
	"RC_MAX_TIMERS"
};


[Internal="rcChunkyTriMesh"]
interface ChunkyTriMesh {

	void ChunkyTriMesh();

	attribute int maxTrisPerChunk;

	[CObject]
	int getNodeTriIndex(int nodeIdx);

	[CObject]
	int getNodeTriCount(int nodeIdx);

	[CObject, Cast="vbyte *"]
	int *getTriVertIndices(int nodeTriIndex);

	[CObject,Internal="rcCreateChunkyTriMesh"]
	boolean build([Const] float [] verts, [Const] int [] tris, int ntris, int trisPerChunk); 	// Native Array

	[CObject,Internal="rcGetChunksOverlappingRect"]
	int getOverlappingRect([Cast="float*"]float2 bmin, [Cast="float*"]float2 bmax, int[] ids, int maxIds);
};



[Internal="rcContext"]
interface RasterContext 
{
    void RasterContext(boolean state);
    void enableLog(boolean state);
	void resetLog();
	void enableTimer(boolean state);
	void resetTimers();
	void startTimer([Const] rcTimerLabel label);

	[CObject, Internal="rcCreateHeightfield"] bool createHeightfield([Deref] Heightfield hf, int width, int height, 
							[Cast="float*"] float3 bmin, [Cast="float*"] float3 bmax, float cs, float ch);

	[CObject, Internal="rcMarkWalkableTriangles"] void markWalkableTriangles([Const] float walkableSlopeAngle, 
							[Const] float[] verts, int nv,[Const] int* tris, int nt, char* areas); 

	[CObject] void rcClearUnwalkableTriangles([Const] float walkableSlopeAngle, 
							[Const] float[] verts, int nv,[Const] int* tris, int nt, char* areas); 

	[CObject] bool rcAddSpan([Ref] Heightfield hf, [Const] int x, [Const] int y, 
							[Const] int smin, [Const] int smax, [Const] int area, [Const] int flagMergeThr);

	[CObject, Internal="rcRasterizeTriangle"] bool rasterizeTriangle([Const,Cast="float*"] float3 v0, [Const,Cast="float*"] float3 v1, 
							[Const,Cast="float*"] float3 v2, [Const] int area, [Ref] Heightfield solid, [Const] int flagMergeThr);

	[CObject,Internal="rcRasterizeTriangles"] 
	bool rasterizeTriangles([Const]  float[] verts, [Const]  int nv,
							[Const]  int* tris, [Const]  char* areas, [Const]  int nt,
							[Deref] Heightfield solid, [Const]  int flagMergeThr);

	[CObject,Internal="rcRasterizeTriangles"] 
	bool rasterizeTriangles([Const]  float[] verts, [Const] char[] areas, [Const]  int nt,
							[Deref] Heightfield solid, [Const]  int flagMergeThr);

	[CObject, Internal="rcFilterLowHangingWalkableObstacles"] 
	void filterLowHangingWalkableObstacles([Const]  int walkableClimb, [Ref] Heightfield solid);

	[CObject, Internal="rcFilterLedgeSpans"]
	void filterLedgeSpans([Const]  int walkableHeight,
							[Const]  int walkableClimb, [Deref] Heightfield solid);

	[CObject, Internal="rcFilterWalkableLowHeightSpans"]
	void filterWalkableLowHeightSpans(int walkableHeight, [Deref] Heightfield solid);

	[CObject] int rcGetHeightFieldSpanCount([Deref] Heightfield hf);

	[CObject, Internal="rcBuildCompactHeightfield"] 
	bool buildCompactHeightfield([Const]  int walkableHeight, [Const]  int walkableClimb, [Deref] Heightfield hf, [Deref] CompactHeightfield chf);

	[CObject, Internal="rcErodeWalkableArea"] 
	bool erodeWalkableArea(int radius, [Deref] CompactHeightfield chf);

	[CObject] bool rcMedianFilterWalkableArea([Deref] CompactHeightfield chf);

	[CObject] void rcMarkBoxArea([Cast="float*"]  float3 bmin, [Cast="float*"] float3 bmax, char areaId,
							[Deref] CompactHeightfield chf);

	[CObject] void rcMarkConvexPolyArea([Cast="float*"] float3 verts, [Const]  int nverts,
							[Const]  float hmin, [Const]  float hmax, char areaId,
							[Deref] CompactHeightfield chf);


	[CObject] void rcMarkCylinderArea([Cast="float*"]  float3 pos,
							[Const]  float r, [Const]  float h, char areaId,
							[Deref] CompactHeightfield chf);

	[CObject] bool rcBuildDistanceField([Deref] CompactHeightfield chf);

	[CObject] bool rcBuildRegions([Deref] CompactHeightfield chf,
							[Const]  int borderSize, [Const]  int minRegionArea, [Const]  int mergeRegionArea);

	[CObject] bool rcBuildLayerRegions([Deref] CompactHeightfield chf, 
							[Const]  int borderSize, [Const]  int minRegionArea);

	[CObject] bool rcBuildRegionsMonotone([Deref] CompactHeightfield chf, 
							[Const]  int borderSize, [Const]  int minRegionArea, [Const]  int mergeRegionArea);

	[CObject] bool rcBuildContours([Ref] CompactHeightfield chf,
					 [Const] float maxError, [Const] int maxEdgeLen,
					 [Ref] rcContourSet cset, [Const] int buildFlags);

	[CObject] bool rcBuildPolyMesh([Ref] rcContourSet cset, [Const] int nvp, [Ref] PolyMesh mesh);

	[CObject] bool rcBuildPolyMeshDetail([Const, Ref] PolyMesh mesh, [Const, Ref] CompactHeightfield chf,
						   [Const] float sampleDist, [Const] float sampleMaxError,
						   [Ref] PolyMeshDetail dmesh);

	[CObject, Internal="rcBuildHeightfieldLayers"] bool buildHeightfieldLayers([Deref] CompactHeightfield chf, int borderSize, int walkableHeight, [Deref] HeightfieldLayerSet lset);
};

interface rcScopedTimer 
{
	void rcScopedTimer(RasterContext ctx, [Const] rcTimerLabel label);
};

[Internal="rcConfig"]
interface RasterConfig {
	void RasterConfig();

	[CObject, Internal="rcConfigCopy"]
	void copy(RasterConfig b);

	attribute long width;
	attribute long height;
	attribute long tileSize;
	attribute long borderSize;

	/// The xz-plane cell size to use for fields. [Limit: > 0] [Units: wu] 
	attribute float cs;
	attribute float ch;
	attribute float3 bmin;
	attribute float3 bmax;
	attribute float walkableSlopeAngle;
	attribute long walkableHeight;
	attribute long walkableClimb;
	attribute long walkableRadius;
	attribute long maxEdgeLen;
	attribute float maxSimplificationError;
	attribute long minRegionArea;
	attribute long mergeRegionArea;
	attribute long maxVertsPerPoly;
	attribute float detailSampleDist;
	attribute float detailSampleMaxError;
};

[Internal="rcSpan"]
interface Span 
{
	attribute long smin;
	attribute long smax;
	attribute long area; 

	// Who is managing this memory?
	attribute Span next; 
};

[Internal="rcSpanPool"]
interface SpanPool 
{
	attribute SpanPool next;					
	// How should this get translated?
	//Span items[RC_SPANS_PER_POOL]; //TODO 
};

[Internal="rcHeightfield"]
interface Heightfield
{
	void Heightfield();

	attribute int width;		
	attribute int height;		
	attribute float3 bmin;  	
	attribute float3 bmax;		
	attribute float cs;			
	attribute float ch;	
	attribute SpanPool pools;
	attribute Span freelist;

	// Workaround for Span **spans;
	[CObject, Internal="rcHeightfield_rcSpanIsValidAt"] bool spanIsValidAt(int pos);
	[CObject, Internal="rcHeightfield_rcSpanAt"] Span spanAt(int pos);
};

interface rcCompactCell
{
	attribute int index;
	attribute int count;
};

interface rcCompactSpan
{
	attribute short y;	
	attribute short reg;
	attribute int con;	
	attribute int h;	
};

[Internal="rcCompactHeightfield"]
interface CompactHeightfield
{
	void CompactHeightfield();
	attribute int width;			
	attribute int height;			
	attribute int spanCount;		
	attribute int walkableHeight;	
	attribute int walkableClimb;	
	attribute int borderSize;		
	attribute int maxDistance;
	attribute int maxRegions;	
	attribute float3 bmin;		
	attribute float3 bmax;		
	attribute float cs;				
	attribute float ch;				
	attribute rcCompactCell cells;	
	attribute rcCompactSpan spans;	
	attribute short * dist;		
	attribute char * areas;		
};

[Internal="rcHeightfieldLayer"]
interface HeightfieldLayer
{
	attribute float3 bmin;
	attribute float3 bmax;
	attribute float cs;		
	attribute float ch;		
	attribute int width;	
	attribute int height;	
	attribute int minx;		
	attribute int maxx;		
	attribute int miny;		
	attribute int maxy;		
	attribute int hmin;		
	attribute int hmax;		

	// Is this internal?
	attribute char * heights;
	attribute char * areas;
	attribute char * cons;
};

[Internal="rcHeightfieldLayerSet"]
interface HeightfieldLayerSet
{
	void HeightfieldLayerSet();
	[Const, Indexed, Ref] HeightfieldLayer layers(int idx);
	attribute int nlayers;
};


interface rcContour
{
	attribute int * verts;		
	attribute int nverts;	
    attribute int * rverts;
	attribute int nrverts;	
	attribute int reg;
	attribute char area;
};


interface rcContourSet
{
	void rcContourSet();
	attribute rcContour conts;
	attribute int nconts;
	attribute float3 bmin;  	
	attribute float3 bmax;		
	attribute float cs;			
	attribute float ch;			
	attribute int width;		
	attribute int height;		
	attribute int borderSize;
	attribute float maxError;	
};

[Internal="rcPolyMesh"]
interface PolyMesh
{
	void PolyMesh();
	attribute short* verts;	
	attribute short* polys;	
	attribute short* regs;	
	attribute short* flags;	
	attribute char* areas;	
	attribute int nverts;		
	attribute int npolys;		
	attribute int maxpolys;		
	attribute int nvp;			
	attribute float3 bmin;	
	attribute float3 bmax;	
	attribute float cs;			
	attribute float ch;			
	attribute int borderSize;
	attribute float maxEdgeError;
};
[Internal="rcPolyMeshDetail"]
interface PolyMeshDetail
{
	void PolyMeshDetail();
	attribute uint * meshes;
	attribute float* verts;		
	attribute char* tris;
	attribute long nmeshes;			
	attribute long nverts;			
	attribute long ntris;			
};



enum rcAllocHint
{
	"RC_ALLOC_PERM",		///< Memory will persist after a function call.
	"RC_ALLOC_TEMP"		///< Memory used temporarily within a function.
};

[NoDelete]
interface RcAlloc {
	[Static, Internal="rcAllocShort", Cast="vbyte *"] short * allocShortArray(int length, rcAllocHint hint);
	[Static, Internal="rcAlloc", Cast="vbyte *"] byte * allocByteArray(int length, rcAllocHint hint);
	[Static, Internal="rcFree"] void freeArray(short *array);
	[Static, Internal="rcClear"] void clearByteArray(byte *array, int length);
	[Static, Internal="rcOffset"] byte *offsetByteArray(byte *array, int offset);
	
};

[NoDelete]
interface Recast{
	[Static] void rcFreeHeightField(Heightfield hf);
	[Static] Heightfield rcAllocHeightfield();
//	[Static] CompactHeightfield rcAllocCompactHeightfield();
//	[Static] void rcFreeCompactHeightfield(rcCompactHeightfield chf);
//	[Static] HeightfieldLayerSet rcAllocHeightfieldLayerSet();
//	[Static] void rcFreeHeightfieldLayerSet(HeightfieldLayerSet lset);
	[Static] rcContourSet rcAllocContourSet();
	[Static] void rcFreeContourSet(rcContourSet cset);
//	[Static] PolyMesh rcAllocPolyMesh();
//	[Static] void rcFreePolyMesh(PolyMesh pmesh);
//	[Static] PolyMeshDetail rcAllocPolyMeshDetail();
//	[Static] void rcFreePolyMeshDetail(PolyMeshDetail dmesh);

	// UPDATED TO NEW METHOD
	[Static, Internal="rcCalcBounds"] void calcBounds(float[] verts, int nv, [Cast="float*"]float3 bmin,  [Cast="float*"] float3 bmax);

	[Static, Internal="rcCalcGridSize"] void calcGridSize( [Cast="float*"] float3 bmin,  [Cast="float*"] float3 bmax, float cs,[Out] int w, [Out] int h);

	

	[Static, Internal="rcOffsetPoly"] int offsetPoly( [Cast="float*"] float3 verts, [Const]  int nverts, [Const]  float offset, [Cast="float*"] float3 outVerts, [Const]  int maxOutVerts);

};


//--------------------------------------------------------------------------------------------
// DetourMath.h
//--------------------------------------------------------------------------------------------
[NoDelete]
interface Math {
	[Static] float fabsf(float x);
	[Static] float sqrtf(float x);
	[Static] float floorf(float x);
	[Static] float ceilf(float x);
	[Static] float cosf(float x);
	[Static] float sinf(float x);
	[Static] float atan2f(float y, float x);
	[Static] bool isfinite(float x);
};

//--------------------------------------------------------------------------------------------
// DetourCommon.h
//--------------------------------------------------------------------------------------------
[NoDelete]
interface DetourCommon {
/*
	[Static] void dtVcross(float3 dest, [Const] float3 v1, [Const] float3 v2);
	[Static] float dtVdot([Const] float3 v1, [Const] float3 v2);
	[Static] void dtVmad(float3 dest, [Const] float3 v1, [Const] float3 v2, [Const] float s);
	[Static] void dtVlerp(float3 dest, [Const] float3 v1, [Const] float3 v2, [Const] float t);
	[Static] void dtVadd(float3 dest, [Const] float3 v1, [Const] float3 v2);
	[Static] void dtVsub(float3 dest, [Const] float3 v1, [Const] float3 v2);
	[Static] void dtVscale(float3 dest, [Const] float3 v, [Const] float t);
	[Static] void dtVmin(float3 mn, [Const] float3 v);
	[Static] void dtVmax(float3 mx, [Const] float3 v);
	[Static] void dtVset(float3 dest, [Const] float x, [Const] float y, [Const] float z);
	[Static] void dtVcopy(float3 dest, [Const] float3 a);
	[Static] float dtVlen([Const] float3 v);
	[Static] float dtVlenSqr([Const] float3 v);
	[Static] float dtVdist([Const] float3 v1, [Const] float3 v2);
	[Static] float dtVdistSqr([Const] float3 v1, [Const] float3 v2);
	[Static] float dtVdist2D([Const] float3 v1, [Const] float3 v2);
	[Static] float dtVdist2DSqr([Const] float3 v1, [Const] float3 v2);
	[Static] void dtVnormalize(float3 v);
	[Static] bool dtVequal([Const] float3 p0, [Const] float3 p1);
	[Static] bool dtVisfinite([Const] float3 v);
	[Static] bool dtVisfinite2D([Const] float3 v);
	[Static] float dtVdot2D([Const] float3 u, [Const] float3 v);
	[Static] float dtVperp2D([Const] float3 u, [Const] float3 v);
	[Static] float dtTriArea2D([Const] float3 a, [Const] float3 b, [Const] float3 c);

    // TODO replace with short3
	[Static] bool dtOverlapQuantBounds([Const] short[] amin, [Const] short[] amax,
						[Const] short[] bmin, [Const] short[] bmax);

	[Static] bool dtOverlapBounds([Const] float3 amin, [Const] float3 amax,
						[Const] float3 bmin, [Const] float3 bmax);

	[Static] void dtClosestPtPointTriangle(float3 closest, [Const] float3 p,
						[Const] float3 a, [Const] float3 b, [Const] float3 c);

	[Static] bool dtClosestHeightPointTriangle([Const] float3 p, [Const] float3 a, [Const] float3 b, 
						[Const] float3 c, [Ref] float h);

	[Static] bool dtIntersectSegmentPoly2D([Const] float3 p0, [Const] float3 p1,
							  [Const] float3 verts, int nverts,
							  [Ref] float tmin, [Ref] float tmax,
							  [Ref] int segMin, [Ref] int segMax);

	[Static] bool dtIntersectSegSeg2D([Const] float3 ap, [Const] float3 aq,
						 [Const] float3 bp, [Const] float3 bq,
						 [Ref] float s, [Ref] float t);

	[Static] bool dtPointInPolygon([Const] float3 pt, [Const] float3 verts, [Const] int nverts);

	[Static] bool dtDistancePtPolyEdgesSqr([Const] float3 pt, [Const] float3 verts, [Const] int nverts,
								float3 ed, float3 et);

	[Static] float dtDistancePtSegSqr2D([Const] float3 pt, [Const] float3 p, [Const] float3 q, [Ref] float t);

	[Static] void dtCalcPolyCenter(float3 tc, [Const, Cast="unsigned short *"] short *idx, int nidx, [Const] float3 verts);

	[Static] bool dtOverlapPolyPoly2D([Const] float3 polya, [Const] int npolya,
							[Const] float3 polyb, [Const] int npolyb);

	[Static, Internal="dtNextPow2"] int nextPow2(int v);
	[Static, Internal="dtIlog2"] int ilog2(int v);
	[Static, Internal="dtAlign4"] int align4(int x);
	[Static] int dtOppositeTile(int side);
	[Static] void dtSwapByte(char[] a, char[] b);	

	[Static, Internal="dtRandomPointInConvexPoly"] void randomPointInConvexPoly([Const] float[] pts, [Const] int npts, float[] areas,
								[Const] float s, [Const] float t, float[] out);
								*/
};

//--------------------------------------------------------------------------------------------
// DetourTileCache.h / DetourTileCacheBuilder.h
//--------------------------------------------------------------------------------------------
[Internal="dtTileCache"]
interface TileCache {
	void TileCache();

	void init([Const] TileCacheParams params, TileCacheAlloc talloc, TileCacheCompressor tcomp, TileCacheMeshProcess tmproc);
	StatusCode addTile(byte * data, long dataSize, long flags, [Out]uint result);
	StatusCode buildNavMeshTilesAt(int tx, int ty, NavMesh navmesh);
	

};

[Internal="dtCompressedTile"]
interface CompressedTile {

};
[Internal="dtTileCacheMeshProcess"] 
interface TileCacheMeshProcess {

};

[Internal="dtTileCacheAlloc"]
interface TileCacheAlloc {

};

[Internal="dtTileCacheCompressor"]
interface TileCacheCompressor {

	[CObject, Internal="dtBuildTileCacheLayer"] byte *buildTileCacheLayer(
							   TileCacheLayerHeader header,
							   [Const] byte* heights,
							   [Const] byte* areas,
							   [Const] byte* cons,
								[Return, Cast="unsigned char **"] byte* outData, [Out] int outDataSize); 
// unsigned char** outData

};

enum TileCacheLayerHeaderConstants {
	"TILECACHE_MAGIC",
	"TILECACHE_VERSION"
};

[Internal="dtTileCacheLayerHeader"]
interface TileCacheLayerHeader {
	void TileCacheLayerHeader();
	attribute int magic;
	attribute int version;
	attribute int tx;
	attribute int ty;
	attribute int tlayer;
	attribute float3 bmin;
	attribute float3 bmax;

	attribute int width;	
	attribute int height;	
	attribute int minx;		
	attribute int maxx;		
	attribute int miny;		
	attribute int maxy;		
	attribute int hmin;		
	attribute int hmax;	


	[Static] int sizeof([Virtual] VoidPointer  dtTileCacheLayerHeader );
};

[Internal="dtTileCacheLayer"]
interface TileCacheLayer {

};

[Internal="dtTileCacheLayer"]
interface TileCacheContour {

};

[Internal="dtTileCacheContourSet"]
interface TileCacheContourSet {

};

[Internal="dtTileCachePolyMesh"]
interface TileCachePolyMesh {

};

[Internal="dtTileCacheObstacle"]
interface TileCacheObstacle {

};

[Internal="dtTileCacheParams"]
interface TileCacheParams {
	void TileCacheParams();

	attribute float3 orig;
	attribute float cs;
	attribute float ch;
	attribute long width;
	attribute long height;
	attribute float walkableHeight;
	attribute float walkableRadius;
	attribute float walkableClimb;
	attribute float maxSimplificationError;
	attribute long maxTiles;
	attribute long maxObstacles;
};

interface TileCacheData {
	void TileCacheData();

	attribute long dataSize;
	attribute byte *data; //[Cast="unsigned char *"] 
};

interface FastLZCompressor {
	void FastLZCompressor();
	[Const] TileCacheCompressor asSuper();
};

interface LinearAllocator {
	void LinearAllocator(long capacity);
	[Const] TileCacheAlloc asSuper();
};


interface RemapProcessor {
	void RemapProcessor();

	[Const] TileCacheMeshProcess asSuper();
};



/// Flags for addTile
enum dtCompressedTileFlags
{
	"DT_COMPRESSEDTILE_FREE_DATA"	///< Navmesh owns the tile memory and should free it.
};


/// Vertex flags returned by dtNavMeshQuery::findStraightPath.
enum dtStraightPathFlags
{
	"DT_STRAIGHTPATH_START",
	"DT_STRAIGHTPATH_END",
	"DT_STRAIGHTPATH_OFFMESH_CONNECTION"
};

/// Options for dtNavMeshQuery::findStraightPath.
enum dtStraightPathOptions
{
	"DT_STRAIGHTPATH_AREA_CROSSINGS",
	"DT_STRAIGHTPATH_ALL_CROSSINGS"
};




//--------------------------------------------------------------------------------------------
// DetourNavMesh.h
//--------------------------------------------------------------------------------------------
typedef dtPolyRef uint;
typedef dtTileRef uint;

interface dtPoly 
{
	attribute int firstLink;
	//attribute short* verts; // TODO original:  unsigned short verts[DT_VERTS_PER_POLYGON];
	//attribute short* neis;  // TODO original:  unsigned short neis[DT_VERTS_PER_POLYGON];
	attribute short flags;
	attribute char vertCount;
	attribute char areaAndtype;
	void setArea(char a);
	void setType(char t);
	[Const] char getArea();
    [Const] char getType();
};

interface dtPolyDetail 
{
	attribute int vertBase;			
	attribute int triBase;			
	attribute char vertCount;		
	attribute char triCount;		
};

interface dtLink 
{
	attribute dtPolyRef ref;		
	attribute int next;				
	attribute char edge;			
	attribute char side;			
	attribute char bmin;			
	attribute char bmax;			
};

interface dtBVNode 
{
	// attribute short* bmin; // TODO replace with short3			
	// attribute short* bmax; // TODO replace with short3	
	attribute int i;					
};

interface dtOffMeshConnection 
{
	// float pos[6]; // TODO original: float pos[6];
	attribute float rad;		
	attribute short poly;
	attribute char flags;
	attribute char side;
	attribute int userId;
};

interface dtMeshHeader 
{
	attribute int magic;				
	attribute int version;			
	attribute int x;					
	attribute int y;					
	attribute int layer;				
	attribute int userId;	
	attribute int polyCount;			
	attribute int vertCount;			
	attribute int maxLinkCount;		
	attribute int detailMeshCount;	
	attribute int detailVertCount;		
	attribute int detailTriCount;		
	attribute int bvNodeCount;		
	attribute int offMeshConCount;	
	attribute int offMeshBase;		
	attribute float walkableHeight;	
	attribute float walkableRadius;	
	attribute float walkableClimb;	
	attribute float3 bmin;			
	attribute float3 bmax;			
	attribute float bvQuantFactor;
};

interface dtMeshTile 
{
	attribute int salt;			
	attribute int linksFreeList;	
	attribute dtMeshHeader header;	
	attribute dtPoly polys; 		  	
	attribute float* verts;
	attribute dtLink links;	
	attribute dtPolyDetail detailMeshes;	
	attribute float* detailVerts;	  
	attribute char* detailTris;
	attribute dtBVNode bvTree;
	attribute dtOffMeshConnection offMeshCons;		
	attribute int dataSize;						
	attribute int flags;							
	attribute dtMeshTile next;			
};

[Internal="dtNavMeshParams"]
interface NavMeshParams 
{
	void NavMeshParams();
	attribute float3 orig;		
	attribute float tileWidth;	
	attribute float tileHeight;	
	attribute int maxTiles;		
	attribute int maxPolys;		
};

[Internal="dtNavMesh"]
interface NavMesh
{
	void NavMesh();

	[Internal="init"] StatusCode setParams([Const] NavMeshParams params);
	StatusCode init([Cast="unsigned char *"]VoidPtr data, [Const] int dataSize, [Const] int flags);
	[Const] NavMeshParams getParams();

	//
	// Tile API
	//
	//StatusCode addTile(char* data, int dataSize, int flags, dtTileRef lastRef, dtTileRef result); TODO
	//StatusCode removeTile(dtTileRef ref, unsigned char** data, int* dataSize); //TODO
//	void calcTileLoc([Const] float[] pos, int[] tx, int[] ty);
//	[Const] dtMeshTile getTileAt([Const] int x, [Const] int y, [Const] int layer);
	//int getTilesAt([Const] int x, [Const] int y, dtMeshTile [Const]** tiles, [Const] int maxTiles); //TODO
	//dtTileRef getTileRefAt(int x, int y, int layer);
	//dtTileRef getTileRef([Const] dtMeshTile tile);
	//[Const] dtMeshTile getTileByRef(dtTileRef ref);
	//int getMaxTiles();
	//[Const] dtMeshTile getTile(int i); // TODO  Public and private duplicate in C++.
	// StatusCode getTileAndPolyByRef([Const] dtPolyRef ref, [Const] dtMeshTile** tile, [Const] dtPoly** poly); //TODO
	// void getTileAndPolyByRefUnsafe([Const] dtPolyRef ref, [Const] dtMeshTile** tile, [Const] dtPoly** poly); //TODO
	//dtPolyRef getPolyRefBase([Const] dtMeshTile tile);
	//int getTileStateSize([Const] dtMeshTile tile);
	//StatusCode storeTileState([Const] dtMeshTile tile, char[] data, [Const] int maxDataSize);
	//StatusCode restoreTileState(dtMeshTile tile, [Const] char[] data, [Const] int maxDataSize);

	//
	bool isValidPolyRef(dtPolyRef ref);
	
	
	StatusCode getOffMeshConnectionPolyEndPoints(dtPolyRef prevRef, dtPolyRef polyRef, float[] startPos, float[] endPos);

	[Const] dtOffMeshConnection getOffMeshConnectionByRef(dtPolyRef ref);
	
	//
	// Poly Area & Flag configuration
	// This is usually already built by the nav mesh process
	//
	StatusCode setPolyFlags(dtPolyRef ref, short flags);
	StatusCode getPolyFlags(dtPolyRef ref, short[] resultFlags);
	StatusCode setPolyArea(dtPolyRef ref, char area);
	StatusCode getPolyArea(dtPolyRef ref, char[] resultArea);


	
	dtPolyRef encodePolyId(int salt, int it, int ip);
	// void decodePolyId(int dtPolyRef, [Out] uint salt, [Out] uint it, [Out] uint ip); // TODO add unsigned int
	
	int decodePolyIdSalt(dtPolyRef ref);
	int decodePolyIdTile(dtPolyRef ref);
	int decodePolyIdPoly(dtPolyRef ref);
};

[NoDelete]
interface DetourNavMesh 
{
	[Static] int dtGetDetailTriEdgeFlags(char triFlags, int edgeIndex);
//	[Static] NavMesh dtAllocNavMesh();
//	[Static] void dtFreeNavMesh(NavMesh navmesh);
};

//--------------------------------------------------------------------------------------------
// DetourNode.h
//--------------------------------------------------------------------------------------------
typedef dtNodeIndex short;

interface dtNode 
{
	attribute float3 pos;
	attribute float cost;
	attribute float total;
	attribute uint pidx;
	attribute uint state;
	attribute uint flags;
	attribute dtPolyRef id;
};

interface dtNodePool
{
	void dtNodePool(int maxNodes, int hashSize);
	void clear();

	dtNode getNode(dtPolyRef id, char state);	
	dtNode findNode(dtPolyRef id, char state);
	//uint findNodes(dtPolyRef id, dtNode** nodes, const int maxNodes); //TODO
	uint getNodeIdx([Const] dtNode node);
	dtNode getNodeAtIdx(uint idx);	
	int getMemUsed();	
	int getMaxNodes();
	int getHashSize();
 	dtNodeIndex getFirst(int bucket);
	dtNodeIndex getNext(int i); 
	int getNodeCount();
};


interface dtNodeQueue
{
	void dtNodeQueue(int n);
	void clear();
	dtNode top();
	dtNode pop();
	void push(dtNode node);
	void modify(dtNode node);
	bool empty();
	int getMemUsed();
	int getCapacity();
};
	

//--------------------------------------------------------------------------------------------
// DetourNavMeshBuilder.h
//--------------------------------------------------------------------------------------------
[Internal="dtNavMeshCreateParams"]
interface NavMeshCreateParams 
{
	void NavMeshCreateParams();

	// Option 1 - Arrays that get coppied and will use the member variable as size	
	// Currently, setting this will likely leak memory. Unless it's disposed by the dtNavMeshCreateParams class
	//	attribute short [vertCount] verts;

	// Option 2 - Direct pointer access.

	attribute short* verts;
	attribute int vertCount;
	[Const] attribute short* polys;
	[Const] attribute short* polyFlags;
	[Const] attribute char* polyAreas;
	attribute int polyCount;							
	attribute int nvp;								
	[Const] attribute uint* detailMeshes;	//TODO check if working ok 
	[Const] attribute float* detailVerts;				
	attribute int detailVertsCount;					
	[Const] attribute char* detailTris;		
	attribute int detailTriCount;
	[Const] attribute float* offMeshConVerts;
	[Const] attribute float* offMeshConRad;
	[Const] attribute short* offMeshConFlags;
	[Const] attribute char* offMeshConAreas;
	[Const] attribute char* offMeshConDir;	
	[Const] attribute uint* offMeshConUserID;
	attribute int offMeshConCount;
	attribute uint userId;	
	attribute int tileX;				
	attribute int tileY;				
	attribute int tileLayer;			
	attribute float3 bmin;			
	attribute float3 bmax;			
	attribute float walkableHeight;
	attribute float walkableRadius;	
	attribute float walkableClimb;	
	attribute float cs;				
	attribute float ch;				
	attribute bool buildBvTree;
};

[NoDelete]
interface DetourNavMeshBuilder
{

	[Static,ReturnArray=(outPtr,aLength)] VoidPointer dtCreateNavMeshData(NavMeshCreateParams params, [Virtual] byte* outPtr, [Out] int aLength ); 
	[Static] bool dtNavMeshHeaderSwapEndian(byte * data, [Const] int dataSize);
	[Static] bool dtNavMeshDataSwapEndian(byte * data, [Const] int dataSize);
};


//--------------------------------------------------------------------------------------------
// DetourNavMeshQuery.h
//--------------------------------------------------------------------------------------------
[Internal="dtQueryFilter"]
interface QueryFilter
{
	void QueryFilter();	

	float getAreaCost([Const] int i);
	void setAreaCost([Const] int i, [Const] float cost);
	short getIncludeFlags();
	void setIncludeFlags([Const] short flags);
	short getExcludeFlags();
	void setExcludeFlags([Const] short flags);
	
};

[Internal="dtRaycastHit"]
interface RaycastHit
{
	attribute float t; 
	attribute float3 hitNormal;
	attribute int hitEdgeIndex;
	attribute dtPolyRef *path; //TODO
	attribute int pathCount;
	attribute int maxPath;
	attribute float pathCost;
};

interface dtPolyQuery
{
	// void process([Const]] dtMeshTile tile, dtPoly** polys, dtPolyRef refs, int count); //TODO
};

[Internal="dtNavMeshQuery"]
interface NavMeshQuery
{
	void NavMeshQuery();
	[Const] NavMesh getAttachedNavMesh();

	//NEW
	StatusCode init( NavMesh nav, int maxNodes);
	StatusCode findPath(dtPolyRef startRef, dtPolyRef endRef, [Cast="float*"]float3 startPos, [Cast="float*"]float3 endPos, QueryFilter filter, dtPolyRef [] path, [Out] int pathCount, int maxPath);
	StatusCode findNearestPoly([Cast="float*"] float3 center, [Cast="float*"] float3 halfExtents,
							 [Const] QueryFilter filter,
							 [Out] dtPolyRef nearestRef, [Cast="float*"]float3 nearestPt);

	StatusCode findNearestPoly([Cast="float*"] float3 center, [Cast="float*"] float3 halfExtents,
							 QueryFilter filter,
							 [Out] dtPolyRef nearestRef, [Cast="float*"]float3 nearestPt, [Out] bool isOverPoly);

	StatusCode initSlicedFindPath(dtPolyRef startRef, dtPolyRef endRef,
								[Cast="float*"]float3 startPos, [Cast="float*"]float3 endPos,
								QueryFilter filter,  uint options);

	StatusCode updateSlicedFindPath(int maxIter, [Out]int doneIters);
	StatusCode finalizeSlicedFindPath(dtPolyRef [] path, [Out] int pathCount, int maxPath);
	StatusCode finalizeSlicedFindPathPartial( dtPolyRef [] existing, int existingSize,
										   dtPolyRef [] path, [Out]int pathCount, int maxPath);
	StatusCode findStraightPath([Cast="float*"]float3 startPos, [Cast="float*"]float3 endPos,
							  dtPolyRef [] path, int pathSize,
							  float[] straightPath, byte [] straightPathFlags, dtPolyRef [] straightPathRefs,
							  [Out] int straightPathCount, int maxStraightPath, int options);

	StatusCode raycast(dtPolyRef startRef,  [Cast="float*"]float3 startPos,[Cast="float*"]float3 endPos,QueryFilter filter,
					 [Out]float t, [Cast="float*"]float3 hitNormal, dtPolyRef [] path, [Out] int pathCount,  int maxPath);
	
	StatusCode raycast(dtPolyRef startRef,  [Cast="float*"]float3 startPos,  [Cast="float*"]float3 endPos,
					 QueryFilter filter,  int options,
					 RaycastHit hit, dtPolyRef prevRef);

	//OLD:



	
	

	StatusCode findPolysAroundCircle(dtPolyRef startRef, [Const] float[] centerPos, [Const] float radius,
								   [Const] QueryFilter filter,
								   [Out] dtPolyRef resultRef, [Out] dtPolyRef resultParent, float[] resultCost,
								   int[] resultCount, [Const] int maxResult);

	StatusCode findPolysAroundShape(dtPolyRef startRef, [Const] float[] verts, [Const] int nverts,
								  [Const] QueryFilter filter,
								  [Out] dtPolyRef resultRef, [Out] dtPolyRef resultParent, float[] resultCost,
								  int[] resultCount, [Const] int maxResult);
	
	StatusCode getPathFromDijkstraSearch(dtPolyRef endRef, [Out] dtPolyRef path, int[] pathCount, int maxPath);

	

	StatusCode queryPolygons([Cast="float*"] float3 center, [Cast="float*"] float3 halfExtents,
						   [Const] QueryFilter filter,
						   [Out] dtPolyRef polys, int[] polyCount, [Const] int maxPolys);

	StatusCode queryPolygons([Cast="float*"] float3 center, [Cast="float*"] float3 halfExtents,
						   [Const] QueryFilter filter, dtPolyQuery query);

	StatusCode findLocalNeighbourhood(dtPolyRef startRef, [Cast="float*"] float3 centerPos, [Const] float radius,
									[Const] QueryFilter filter,
									[Out] dtPolyRef resultRef, [Out] dtPolyRef resultParent,
									int[] resultCount, [Const] int maxResult);

	StatusCode moveAlongSurface(dtPolyRef startRef, [Cast="float*"] float3 startPos, [Cast="float*"] float3 endPos,
							  [Const] QueryFilter filter, [Cast="float*"]float3 resultPos, [Out] dtPolyRef visited, 
							  int[] visitedCount, [Const] int maxVisitedSize);
	


	StatusCode findDistanceToWall(dtPolyRef startRef, [Const] float[] centerPos, [Const] float maxRadius,
								[Const] QueryFilter filter,
								float[] hitDist, float[] hitPos, float[] hitNormal);

	StatusCode getPolyWallSegments(dtPolyRef ref, [Const] QueryFilter filter,
								 float[] segmentVerts, [Out] dtPolyRef segmentRefs, int[] segmentCount,
								 [Const] int maxSegments);

	// StatusCode findRandomPoint([Const] QueryFilter filter, float (*frand)(),
	// 						 dtPolyRef randomRef, float[] randomPt) [Const];

	// StatusCode findRandomPointAroundCircle(dtPolyRef startRef, [Const] float[] centerPos, [Const] float maxRadius,
	// 									 [Const] QueryFilter filter, float (*frand)(),
	// 									 dtPolyRef randomRef, float[] randomPt); //TODO

	StatusCode closestPointOnPoly(dtPolyRef ref, [Const] float[] pos, float[] closest, bool[] posOverPoly);

	StatusCode closestPointOnPolyBoundary(dtPolyRef ref, [Const] float[] pos, float[] closest);

	StatusCode getPolyHeight(dtPolyRef ref, [Const] float[] pos, float[] height);

	bool isValidPolyRef(dtPolyRef ref, QueryFilter filter);
	bool isInClosedList(dtPolyRef ref);

    //dtNodePool getNodePool();


	//[CObject, Internal="dtFreeNavMeshQuery"] void free();
};

[NoDelete]
interface DetourNavMeshQuery
{
//	[Static] NavMeshQuery dtAllocNavMeshQuery();
//	[Static] void dtFreeNavMeshQuery(NavMeshQuery query);
};

[NoDelete]
interface Detour {
		[Static, Internal="dtFree"] void free(VoidPointer ptr);
};

interface PerformanceTimer {
	void PerformanceTimer();
	void start();
	void stop();
	double deltaSeconds();
	double deltaMilliseconds();
	double deltaMicroseconds();
};

[NoDelete]
interface Tests {
	[Static, Internal="setToZero"]
	void setToZero( [Out] int a, [Out] float b, [Out] double c, [Out] bool d);
	[Static, Internal="setToOne"]
	void setToOne( [Out] int a, [Out] float b, [Out] double c, [Out] bool d);
};

[Internal="dtMeshCapture"]
interface MeshCapture {
	void MeshCapture(boolean isSurface);
	void captureNavMesh([Deref] NavMesh nm, int flags);
	void captureHeightField([Deref] Heightfield hf);
	void captureCompactHeightField([Deref] CompactHeightfield chf);
	void captureHeighfieldLayerSet( [Deref] HeightfieldLayerSet hfls );
	
	long numVerts();
	long numSurfacePrims();
	boolean isSurface();
	void getVert(int idx, [Cast="float*"]float3 pos  ); 

};
